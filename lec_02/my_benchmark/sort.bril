@populateTable(tableSize: int, table: ptr<int>) {
  zero:  int = const 0;
  one:   int = const 1;
  two:   int = const 2;
  three: int = const 3;
  four:  int = const 4;
  five:  int = const 5;
  six:   int = const 6;
  seven: int = const 7;
  eight: int = const 8;
  nine:  int = const 9;
  ten:   int = const 10;
  offsetTable: ptr<int> = ptradd table zero;
  store offsetTable seven;
  offsetTable: ptr<int> = ptradd offsetTable one;
  store offsetTable two;
  offsetTable: ptr<int> = ptradd offsetTable one;
  store offsetTable three;
  offsetTable: ptr<int> = ptradd offsetTable one;
  store offsetTable zero;
  offsetTable: ptr<int> = ptradd offsetTable one;
  store offsetTable one;
  offsetTable: ptr<int> = ptradd offsetTable one;
  store offsetTable nine;
  offsetTable: ptr<int> = ptradd offsetTable one;
  store offsetTable one;
  offsetTable: ptr<int> = ptradd offsetTable one;
  store offsetTable six;
  offsetTable: ptr<int> = ptradd offsetTable one;
  store offsetTable five;
  offsetTable: ptr<int> = ptradd offsetTable one;
  store offsetTable four;
}

@printTable(tableSize: int, table: ptr<int>) {
  idx: int = const 0;
  zero: int = const 0;
  one: int = const 1;
.print.table.for.cond:
  continue: bool = lt idx tableSize;
  br continue .print.table.for.body .print.table.for.end;
.print.table.for.body:
  offsetTable: ptr<int> = ptradd table idx;
  num: int = load offsetTable;
  print num;
  idx: int = add idx one;
  jmp .print.table.for.cond;
.print.table.for.end:
  ret;
}

@sortTable(tableSize: int, table: ptr<int>) {
  idx_i: int = const 0;
  zero: int = const 0;
  one: int = const 1;
.sort.table.for.cond:
  sort_continue: bool = lt idx_i tableSize;
  br sort_continue .sort.table.for.body .sort.table.for.end;
.sort.table.for.body:
  min_idx: int = id idx_i;
  idx_j: int = add idx_i one;
.findmin.for.cond:
  findmin_continue: bool = lt idx_j tableSize;
  br findmin_continue .findmin.for.body .findmin.for.end;
.findmin.for.body:
  searchValueOffset: ptr<int> = ptradd table idx_j;
  minValueOffset: ptr<int> = ptradd table min_idx;
  searchValue: int = load searchValueOffset;
  minValue: int = load minValueOffset;
  haveNewMin: bool = lt searchValue minValue;
  br haveNewMin .haveNewMin.if.true .haveNewMin.if.end;
  jmp .haveNewMin.if.end;
.haveNewMin.if.true:
  min_idx: int = id idx_j;
.haveNewMin.if.end:
  jmp .findmin.for.cond;
.findmin.for.end:
  swapNewMin: bool = ne idx_i min_idx;
  br swapNewMin .swapNewMin.if.true .swapNewMin.if.end;
  jmp .swapNewMin.if.end;
.swapNewMin.if.true:
  oldMinDest: ptr<int> = ptradd table idx_i;
  newMinDest: ptr<int> = ptradd table min_idx;
  oldMinValue: int = load newMinDest;
  newMinValue: int = load oldMinDest;
  store newMinDest newMinValue;
  store oldMinDest oldMinValue;
.swapNewMin.if.end:
  jmp .sort.table.for.cond;
.sort.table.for.end:
  ret;
}

@main {
  n: int = const 10;
  table: ptr<int> = alloc n;
  call @populateTable n table;
  #call @printTable n table;
  call @sortTable n table;
  call @printTable n table;
  free table;
}
